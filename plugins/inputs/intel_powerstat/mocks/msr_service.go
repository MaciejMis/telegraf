// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MsrService is an autogenerated mock type for the MsrService type
type MsrService struct {
	mock.Mock
}

// GetAperfDelta provides a mock function with given fields: CPU
func (_m *MsrService) GetAperfDelta(CPU string) uint64 {
	ret := _m.Called(CPU)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(CPU)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetC3Delta provides a mock function with given fields: CPU
func (_m *MsrService) GetC3Delta(CPU string) uint64 {
	ret := _m.Called(CPU)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(CPU)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetC6Delta provides a mock function with given fields: CPU
func (_m *MsrService) GetC6Delta(CPU string) uint64 {
	ret := _m.Called(CPU)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(CPU)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetC7Delta provides a mock function with given fields: CPU
func (_m *MsrService) GetC7Delta(CPU string) uint64 {
	ret := _m.Called(CPU)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(CPU)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetCpuIDs provides a mock function with given fields:
func (_m *MsrService) GetCpuIDs() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetMperfDelta provides a mock function with given fields: CPU
func (_m *MsrService) GetMperfDelta(CPU string) uint64 {
	ret := _m.Called(CPU)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(CPU)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetReadDate provides a mock function with given fields: CPU
func (_m *MsrService) GetReadDate(CPU string) int64 {
	ret := _m.Called(CPU)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(CPU)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetTemperature provides a mock function with given fields: CPU
func (_m *MsrService) GetTemperature(CPU string) uint64 {
	ret := _m.Called(CPU)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(CPU)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetThrottleTemperature provides a mock function with given fields: CPU
func (_m *MsrService) GetThrottleTemperature(CPU string) uint64 {
	ret := _m.Called(CPU)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(CPU)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetTimestampDelta provides a mock function with given fields: CPU
func (_m *MsrService) GetTimestampDelta(CPU string) uint64 {
	ret := _m.Called(CPU)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(CPU)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// OpenAndReadMsr provides a mock function with given fields: core
func (_m *MsrService) OpenAndReadMsr(core string) error {
	ret := _m.Called(core)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(core)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveCPUFrequencyForCore provides a mock function with given fields: core
func (_m *MsrService) RetrieveCPUFrequencyForCore(core string) (float64, int64, error) {
	ret := _m.Called(core)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(core)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(string) int64); ok {
		r1 = rf(core)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(core)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetReadDate provides a mock function with given fields: CPU, date
func (_m *MsrService) SetReadDate(CPU string, date int64) {
	_m.Called(CPU, date)
}
