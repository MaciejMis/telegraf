// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RaplService is an autogenerated mock type for the RaplService type
type RaplService struct {
	mock.Mock
}

// GetConstraintMaxPower provides a mock function with given fields: socketID
func (_m *RaplService) GetConstraintMaxPower(socketID string) (float64, error) {
	ret := _m.Called(socketID)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(socketID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(socketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentDramPowerConsumption provides a mock function with given fields: socketID
func (_m *RaplService) GetCurrentDramPowerConsumption(socketID string) float64 {
	ret := _m.Called(socketID)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(socketID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetCurrentPackagePowerConsumption provides a mock function with given fields: socketID
func (_m *RaplService) GetCurrentPackagePowerConsumption(socketID string) float64 {
	ret := _m.Called(socketID)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(socketID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetDramMaxEnergyRangeUj provides a mock function with given fields: socketID
func (_m *RaplService) GetDramMaxEnergyRangeUj(socketID string) (float64, error) {
	ret := _m.Called(socketID)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(socketID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(socketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaxEnergyRangeUj provides a mock function with given fields: socketID
func (_m *RaplService) GetMaxEnergyRangeUj(socketID string) (float64, error) {
	ret := _m.Called(socketID)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(socketID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(socketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSocketIDs provides a mock function with given fields:
func (_m *RaplService) GetSocketIDs() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// InitializeRaplData provides a mock function with given fields:
func (_m *RaplService) InitializeRaplData() {
	_m.Called()
}

// RetrieveAndCalculateData provides a mock function with given fields: socketID
func (_m *RaplService) RetrieveAndCalculateData(socketID string) error {
	ret := _m.Called(socketID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(socketID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
